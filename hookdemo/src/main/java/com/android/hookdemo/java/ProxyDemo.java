package com.android.hookdemo.java;

/**
 * Created by mr.kong on 2017/11/16.
 * 静态代理
 */

public class ProxyDemo {
    //意图：为其他对象提供一种代理以控制这个对象的访问
    //适用性：
//    适用性：
//   远程代理（ Remote Proxy ）： 为一个对象在不同的地址空间提供局部代表。
//   虚代理（Virtual Proxy）根据需要创建开销很大的对象。使用一个代理对象作为代表，在真正的需要时进行创建。
//   保护代理（Protection Proxy）：控制对原始对象的访问。保护代理用于对象应该有不同的访问权限的时候。
//   智能指引（Smart Reference）： 取代了简单的指针，它在访问对象时执行一些附加操作。对指向实际对象的引用计数，

    /**
     * 这样当该对象没有引用时，可以自动释放它，智能指针当第一次引用一个持久对象时，将它装入内存。
     　　　　在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它
     */

    //代理模式应用的场景
    //如果已经存在的方法在使用的时候要对原来的方法进行改动 ，此时有两种方法
    //1、修改原来的方法 这样的话 违反了"对扩展开放 ，对修改关闭"的原则
    //2、采用代理类调用原有的方法 ，并且对产生的结果进行控制 这种方法其实就是代理模式
    //采用代理模式 可以将功能更好的划分 有助于后期的维护



}
